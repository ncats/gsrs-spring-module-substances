include "gsrs-core.conf"
spring.jackson.deserialization.fail-on-unknown-properties=false
springfox.documentation.enabled=false

spring.main.allow-circular-references=true
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB
#Disable Eureka Client by Default - change to true to turn eureka client on
#if no eureka server is found and client is enabled it will spam the console with errors every few seconds as it polls.
eureka.client.enabled= false

#Allows deep analysis of fields to do suggestions

ix.index.deepfields = ["ix.ginas.models.v1.Substance"]
ix.index.deepfieldsraw = "ix.ginas.models.v1.Substance"


# When an unspecified search happens, promote all
# exact matches that match specific fields over
# the rest of the matches. In other words,
# you can prioritize exact matches of "NAME"
# over exact matches of other fields

ix.core.exactsearchfields=[
        {
                "class":"ix.ginas.models.v1.Substance",
                "fields":[
                        "root_names_name",
                        "root_approvalID",
                        "root_codes_CAS",
                        "root_names_stdName",
                        "root_uuid",
                        "root_structure_hash",
                        "root_structure_formula",
                        "root_structure_inchikey",
                        "root_moieties_structure_inchikey",
                        "root_structure_properties_term",
                        "root_moieties_properties_term",
                        "root_codes_BDNUM"
                ]
        }
]




ix.structure{
    base = ${ix.home}/structure
}
ix.sequence{
    base = ${ix.home}/sequence
}
gsrs.rabbitmq.enabled = false


#server.servlet.session.cookie.name= "ix.session"

ix.core.structureIndex.atomLimit = 240

ix.structure-hasher = "ix.core.chem.InchiStructureHasher"
ix.structure-standardizer = "ix.core.chem.InchiStandardizer"


ix.json.typeIdResolvers = ["ix", "gsrs.module.substance"]


substance.hierarchyFinders.recipes=[
        {
        "relationship" = "ACTIVE MOIETY",
        #"renameChildLambda" = """ (p,c)->"HAS ACTIVE MOIETY:\"" + p.getName() + "\"" """
        "renameChildSpel" = "'HAS ACTIVE MOIETY:\"'+parent.getName() + '\"'"
        },
        {
        "relationship" = "SALT/SOLVATE->PARENT",
        "invertible" = true,
        "renameChildTo" = "IS SALT/SOLVATE OF"
        },
         {
        "relationship" = "SUB_CONCEPT->SUBSTANCE",
        "invertible" = true,
        "renameChildTo" = "IS SUBCONCEPT OF"
        },

]

gsrs.standardizers.substances = {
    "name" = {
        "standardizerClass" = "gsrs.module.substance.standardizer.HtmlNameStandardizer"
    },
    "stdname" = {
        "standardizerClass" = "gsrs.module.substance.standardizer.HtmlNameStandardizer"
    }
}

gsrs.validators.substances.list.IgnoreValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.IgnoreValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "configClass" = "SubstanceValidatorConfig"
                                 "order": 100
                               }
gsrs.validators.substances.list.NullCheckValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.NullCheckValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 200
                               }
gsrs.validators.substances.list.AutoGenerateUuidIfNeeded =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.AutoGenerateUuidIfNeeded",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 300
                               }
gsrs.validators.substances.list.StructuralModificationsValidator =
                               {
                                 #validates that any structural modifications are effectively non-null
                                 "validatorClass" = "ix.ginas.utils.validation.validators.StructuralModificationsValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 400
                               },
gsrs.validators.substances.list.SubstanceStatusValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.SubstanceStatusValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 500
                               }
gsrs.validators.substances.list.RemovePublicIndReferences =                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.RemovePublicIndReferences",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 600
                               }
gsrs.validators.substances.list.NamesValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.NamesValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 700,
                                 "type" = "PRIMARY"
                                 "configClass" = "SubstanceValidatorConfig",
                                 "parameters"= {
                                    "caseSearchType": "Explicit"
                                 }
                               }
gsrs.validators.substances.list.PrimaryRelationshipsValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.PrimaryRelationshipsValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 800,
                                 "type" = "PRIMARY"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.NotesValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.NotesValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 900,
                                 "type" = "PRIMARY"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.PrimaryDefinitionValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.PrimaryDefinitionValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1000,
                                 "type" = "PRIMARY"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.AlternateDefinitionValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.AlternateDefinitionValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1100,
                                 "type" = "ALTERNATIVE"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.ChemicalValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.ChemicalValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1200,
                                 "substanceClass" = "chemical",
                                 # September 2020: additional parameter 'allow0AtomStructures' when true -> user can register blank structures; false -> no blank structures
                                 "parameters"= {"allow0AtomStructures":false, "allowV3000Molfiles": false }
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.MixtureValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.MixtureValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1300,
                                 "substanceClass" = "mixture"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.NucleicAcidValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.NucleicAcidValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1400,
                                 "substanceClass" = "nucleicAcid",
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.PolymerValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.PolymerValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1500,
                                 "substanceClass" = "polymer"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.ProteinValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.ProteinValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1600,
                                 "substanceClass" = "protein"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.StructurallyDiverseValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.StructurallyDiverseValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1700,
                                 "substanceClass" = "structurallyDiverse"
                                 "configClass" = "SubstanceValidatorConfig"
                               }
gsrs.validators.substances.list.SSSG1Validator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.SSSG1Validator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1800
                                 "substanceClass" = "specifiedSubstanceG1",
                                 "configClass" = "SubstanceValidatorConfig"
                               },
gsrs.validators.substances.list.UnknownSubstanceClassValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.UnknownSubstanceClassValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 1900
                               }
gsrs.validators.substances.list.NewSubstanceNonBatchLoadValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.NewSubstanceNonBatchLoadValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2000
                               }
gsrs.validators.substances.list.UpdateSubstanceNonBatchLoaderValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.UpdateSubstanceNonBatchLoaderValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2100
                               }
gsrs.validators.substances.list.PublicDomainRefValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.PublicDomainRefValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2200
                               }
gsrs.validators.substances.list.DefinitionalHashValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.DefinitionalHashValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2300,
                                 "disabled": false
                               }
gsrs.validators.substances.list.DefinitionalReferenceValidator =
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.DefinitionalReferenceValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2400
                               }
gsrs.validators.substances.list.RelationshipModificationValidator =
                               # Validator for Relationship modifications (restrict to admins)
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.RelationshipModificationValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2500,
                                 "disabled": false
                               }
gsrs.validators.substances.list.PropertyValidator =
                               # Make sure each property has a name
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.PropertyValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2600,
                                 "disabled": false
                               }
gsrs.validators.substances.list.SuperatomValidator =
                               # Check the mol files of chemical substances and throw errors if there are SUP s-groups.
                               # To remove this check comment out or delete this statement.
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.SuperatomValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2700,
                                 "substanceClass" = "chemical",
                                 "configClass" = "SubstanceValidatorConfig"
                               }

# __aw__ including this here and not in MS, cross check with substances service
gsrs.validators.substances.list.StandardNameValidator =
                               #Standardize Names; Listed here for reference. Copy and paste into your application.conf and uncomment.
                               {
                                 "validatorClass" = "ix.ginas.utils.validation.validators.StandardNameValidator",
                                 "newObjClass" = "ix.ginas.models.v1.Substance",
                                 "order": 2800,
                                 "configClass" = "SubstanceValidatorConfig",
                                 "parameters"= {
                                   "behaviorOnInvalidStdName": "warn"
                                 }
                               }

# __aw__ include this in substance-core.conf instead in microservice since it can now be disabled easily
# __aw__ make sure this is still consistent with FDA ???
# Manage tags/bracketed terms in names per FDA configuration.
# In FDA's case:
# No automatic addition in tags found in names to explicit tag list.
# No automatic deletion of explicit tags missing from bracketed terms.
# Warnings off for bracket name missing from tags; warning on for explicit tag missing from names.
gsrs.validators.substances.list.TagsValidator = {
  "validatorClass" = "ix.ginas.utils.validation.validators.tags.TagsValidator",
  "newObjClass" = "ix.ginas.models.v1.Substance",
  "order": 2850,
  "parameters" = {
    "checkExplicitTagsExtractedFromNames": false,
    "checkExplicitTagsMissingFromNames": true,
    "addExplicitTagsExtractedFromNamesOnCreate": false,
    "addExplicitTagsExtractedFromNamesOnUpdate": false,
    "removeExplicitTagsMissingFromNamesOnCreate": false,
    "removeExplicitTagsMissingFromNamesOnUpdate": false
  }
}



##############################################
# THIS IS IMPORTANT, ADDITION OF VALIDATORS!
##############################################

gsrs.validators.substances.list.CodeFormatValidator =
        {
          "validatorClass" = "ix.ginas.utils.validation.validators.CodeFormatValidator",
          "newObjClass" = "ix.ginas.models.v1.Substance",
          "order": 2900
        }
gsrs.validators.substances.list.SaltValidator =
        # TODO katzelda Feb 2021: remove for now
        # Check that individual moieties of a multi-moiety chemical are registered separately
        {
          "validatorClass" = "ix.ginas.utils.validation.validators.SaltValidator",
          "newObjClass" = "ix.ginas.models.v1.ChemicalSubstance",
          "order": 3000
        }
gsrs.validators.substances.list.SubstanceUniquenessValidator =
        # Check for uniqueness of several classes of substance based on definitional hashes
        {
          "validatorClass" = "ix.ginas.utils.validation.validators.SubstanceUniquenessValidator",
          "newObjClass" = "ix.ginas.models.v1.Substance",
          "order": 3100
        }
gsrs.validators.substances.list.CASCodeValidator =
        {
          # add check for CAS RNs
          "validatorClass" = "ix.ginas.utils.validation.validators.CASCodeValidator",
          "newObjClass" = "ix.ginas.models.v1.Substance",
          "order": 3200
        }
gsrs.validators.substances.list.SetReferenceAccess =
        #removed from suggestedPublic but not yet added to alwaysPrivate: CTP and DMF
        {
          "validatorClass" = "ix.ginas.utils.validation.validators.SetReferenceAccess",
          "newObjClass" = "ix.ginas.models.v1.Substance",
          "configClass" = "SubstanceValidatorConfig",
          "order": 3300,
          "suggestedPublic": [
            "ACD", "ALANWOOD", "ALGAEBASE", "AMERICAN BOTANICAL COUNCIL", "ANNONBASE",
            "ATC INN", "ATCC", "AUSTRALIAN PLANT NAME INDEX", "BAN", "BIOPHARMA", "BIOS", "BIOSYSTEMATIC DATABASE of WORLD DIPTERA",
            "BLATTODEA SPECIES", "BOOK", "BRASSICACEAE", "BRITISH PHARMACOPOEIA", "CAS", "CATALOGUE OF LIFE CHINA", "CENTER FOR DISEASE CONTROL", "CFR",
            "CHEBI", "CHEMBANK", "CHEMID", "CHEMSPIDER", "CHENOBASE", "CHINESE HERBAL MEDICINE", "CLINICAL PHARMACOLOGY", "CLINICAL_TRIALS.GOV", "CLINICALTRIALS", "CODEX Alimentarius", "COMBINED CHEMICAL DICTIONARY", "CONIFER DATABASE", "CTD_TOXICOGENOMICS", "CVM GREEN BOOK", "DAILYMED", "DOSE", "DOTHIDEOMYCETES", "DROSERACEAE DATABASE", "DRUG PRODUCT LABEL", "DRUGS@FDA", "EAFUS", "EC FLAVOURING SUBSTANCES", "ECHA (EC/EINECS)", "EMA LIST", "EMA REVIEW", "EP", "EPA", "EU CLINICAL TRIALS", "EUROPEAN PHARMACOPEIA", "EVMPD", "FACTS AND COMPARISIONS", "FADA BIVALVIA", "FDA APPROVED DRUG LABEL", "FDA GUIDANCE", "FEDERAL REGISTER", "FISHBASE", "FOOD LOVERS COMPANION", "GERANIUM TAXONOMIC INFORMATION SYSTEM", "GLOBAL BIODIVERSITY INFORMATION FACILITY", "GLOBAL COMPOSITAE CHECKLIST", "GLOMEROMYCOTA", "GREEN BOOK", "GRIN", "HANDBOOK OF FLAVOR INGREDIENTS", "HANDBOOK OF FLAVORS & FRAGRANCES", "HANDBOOK OF INORGANIC CHEMICALS", "HANDBOOK OF PHARMACEUTICAL ADDITIVES", "HANDBOOK OF PHARMACEUTICAL EXCIPIENTS", "HAWLEY CONDENSED CHEMICAL DICTIONARY", "HEALTH CANADA", "HERBAL MEDICINES", "HERBS OF COMMERCE", "HOMEOPATHIC PHARMACOPOEIA US", "HPE-KIBBE", "ICSAS", "ICTV", "ILDIS", "INCB", "INTELEOS", "INTERNATIONAL ORGANIZATION FOR PLANT INFORMATION", "INTERNATIONAL PLANT NAMES INDEX", "INVESTIGATOR BROCHURE", "ISO", "IT IS", "IUPHAR", "JA", "JAN", "JAPAN CHEMICAL SUBSTANCE DICTIONARY", "JAPANESE PHARMACOPOEIA", "JECFA", "JECFA: JOINT FAO/WHO COMMITTEE FOOD ADD", "KEGG", "KEW GARDENS (WCPS)", "KEW GARDENS FUNGI", "KNOVEL CONTENT", "LANDES MUSEUM BIOLOGIEZENTRUM", "LANGUAL", "LECYTHIDACEAE PAGES", "LEPINDEX", "LEUNG NATURAL INGREDIENTS", "LEUNGS ENCYLOPEDIA OF COMMON NATURAL INGREDIENTS 3RD ED.", "LEXI-COMP", "LIAS", "MANUFACTURER PRODUCT ", "MARTINDALE", "MATERIA MEDICA FOR CHINESE MEDICINE", "MDDR", "MEETING ABSTRACT", "MELASTOMATACEAE.NET", "MERCK INDEX", "MICROMEDEX", "MIRBASE", "MSDS", "MYCOBANK", "NCATS List", "NCBI", "NCI DRUG DICTIONARY", "NCI THESAURUS", "NCI_NDFRT", "NDA PUBLIC REVIEW", "NDF-RT", "NEW ZEALAND ORGANISMS REGISTER", "NIAID CHEMDB", "NIST WEBBOOK", "NLM", "NOMEN.EUMYCETOZOA.COM", "OMOP", "ORANGE BOOK", "ORPHAN DRUG", "ORTHOPTERA SPECIES FILE", "PARHOST", "PATENT", "PATTYS TOXICOLOGY", "PERSONAL CARE PRODUCTS COUNCIL", "PHARMACOPOEIA OF THE PEOPLE'S REPUBLIC OF CHINA", "PHARMAPROJECTS", "PLANT LIST", "PLANTS FOR A FUTURE", "PLOTKIN VACCINES", "PRODUCT PACKAGE INSERT", "RJB GERANIUM", "SAX DANGEROUS PROPERTIES", "SCALENET", "SIGMA-ALDRICH", "SITTIG HANDBOOK OF PESTICIDES", "SLOAN-KETT", "SOLANACEAE SOURCE", "SPECIALTY CHEMICALS", "SPIDCAT", "STN (SCIFINDER)", "SWEDISH SUBSTANCE LIST", "SWISS MEDIC", "SYSTEMA DIPTERORUM", "TIGR REPTILES", "TOBACCO KNOWLEDGE BASE", "TOX21", "TROPICOS", "UCSF-FDA TRANSPORTAL", "UNIPROT", "URMO", "USP", "USP DIETARY SUPPLEMENTS COMPENDIUM", "USP FOOD CHEMICALS CODEX", "USP HERBAL MEDICINES COMPENDIUM", "USP PHARMACOPOEIAL FORUM", "USP-MC", "USPNF", "VATC",
            "WEBSITE", "WHO DRUG DICTIONARY", "WHO INTERNATIONAL PHARMACOPOEIA",
            "WIKI", "WORLD BIODIVERSITY DATABASE", "WORLD PLANTS", "WORLD UMBELLIFER DATABASE", "WEB PAGE"],
          "alwaysPrivate" : ["ANDA", "BLA", "EU-NCA (CBG-MEB)", "IND", "INTEGRITY SERVICES", "NDA"],
          "referenceCitationPatterns" : [".*[^A-Z]IND[^A-Z]*[0-9][0-9][0-9]*.*"]
       }

gsrs.validators.substances.list.CodesValidator =
        {
          "validatorClass" = "ix.ginas.utils.validation.validators.CodesValidator",
          "newObjClass" = "ix.ginas.models.v1.Substance",
          "order": 3400,
          "configClass" = "SubstanceValidatorConfig"
        }
gsrs.validators.substances.list.ChemicalUniquenessValidator =
        {
          "validatorClass" = "ix.ginas.utils.validation.validators.ChemicalUniquenessValidator",
          "newObjClass" = "ix.ginas.models.v1.Substance",
          "order": 3500,
          "configClass" = "SubstanceValidatorConfig",
          "parameters"= {}
        }

# commented out do we want it but disabled?
# gsrs.validators.substances.list.CodeUniquenessValidator =
#         {
#           "validatorClass" = "ix.ginas.utils.validation.validators.CodeUniquenessValidator",
#           "newObjClass" = "ix.ginas.models.v1.Substance",
#           "order": 3600,
#           "configClass" = "SubstanceValidatorConfig",
#           "parameters"= {"singletonCodeSystems" =["CAS"]}
#         }







spring.application.name=substance

#logging.level.org.springframework.web=DEBUG

server.servlet-path=/loop-service

server.use-forward-headers=true

ix.api.registeredfunctions.list.InChIRegisteredFunction =
        {
           "registeredFunctionClass": "ix.core.util.pojopointer.extensions.InChIRegisteredFunction",
           "order": 1500
        }
ix.api.registeredfunctions.list.InChIFullRegisteredFunction =
        {
          "registeredFunctionClass":"ix.core.util.pojopointer.extensions.InChIFullRegisteredFunction"
          "order": 1600,
        }

substance.renderer.style="CONF"
substance.renderer.configPath="substances-default-renderer.json"

server.tomcat.relaxed-path-chars="<,>,[,\\,],^,`,{,|,}"


ix.gsrs.delimitedreports.inchikeysforambiguousstereo=true
#List of ExportFactory classes that can export Substances
#the list of classes is ordered by priority
#if more than one Exporter supports the same file extension,
#the class in the list that supports it fist wins.



# We need to eliminate this way of configuring exports
XXXX_ix.ginas.export.factories.substances_XXXX = [
    # "gsrs.module.substance.ExtraColumnsSpreadsheetExporterFactory",
	# "gsrs.module.substance.exporters.SdfExporterFactory",
	# "gsrs.module.substance.exporters.DefaultSubstanceSpreadsheetExporterFactory",
	# "gsrs.module.substance.exporters.JsonExporterFactory",
	# "ix.ginas.exporters.FDANameExporterFactory",
	# "ix.ginas.exporters.FDACodeExporterFactory",
    # "ix.ginas.exporters.SPLValidatorXMLExporterFactory",
    # "ix.ginas.exporters.SRSLegacyDictionaryExporterFactory"
]

ix.ginas.export.exporterfactories.substances.list.DefaultSubstanceSpreadsheetExporterFactory =
{
    "exporterFactoryClass" = "gsrs.module.substance.exporters.DefaultSubstanceSpreadsheetExporterFactory",
    "order" =  1000,
    "parameters":{
    }
}
ix.ginas.export.exporterfactories.substances.list.JsonExporterFactory =
{
    "exporterFactoryClass" = "gsrs.module.substance.exporters.JsonExporterFactory",
    "order" =  1100,
    "parameters":{
    }
}
ix.ginas.export.exporterfactories.substances.list.FDANameExporterFactory =
{
    "exporterFactoryClass" = "fda.gsrs.substance.exporters.FDANameExporterFactory",
    "order" =  1200,
    "disabled" = true,
    "parameters":{
    }
}
ix.ginas.export.exporterfactories.substances.list.FDACodeExporterFactory =
{
    "exporterFactoryClass" = "fda.gsrs.substance.exporters.FDACodeExporterFactory",
    "order" =  1300,
    "disabled" = true,
    "parameters":{
    }
}
ix.ginas.export.exporterfactories.substances.list.SPLValidatorXMLExporterFactory =
{
    "exporterFactoryClass" = "fda.gsrs.substance.exporters.SPLValidatorXMLExporterFactory",
    "order" =  1400,
    "disabled" = true,
    "parameters":{
    }
}
ix.ginas.export.exporterfactories.substances.list.SRSLegacyDictionaryExporterFactory =
{
    "exporterFactoryClass" = "fda.gsrs.substance.exporters.SRSLegacyDictionaryExporterFactory",
    "order" =  1500,
    "disabled" = true,
    "parameters":{
    }
}
#
ix.ginas.export.exporterfactories.substances.list.SdfExporterFactory =
{
    "exporterFactoryClass" = "gsrs.module.substance.exporters.SdfExporterFactory",
    "order" =  1600,
    "parameters":{
      "approvalIDName": "UNII"
    }
}

substance.definitional-elements.implementations =[
{
"implementationClass" : "gsrs.module.substance.definitional.ChemicalSubstanceDefinitionalElementImpl"
}
{
"implementationClass" : "gsrs.module.substance.definitional.MixtureDefinitionalElementImpl"
},
{
"implementationClass" : "gsrs.module.substance.definitional.ModificationsDefintionalElementImpl"
},
{
"implementationClass" : "gsrs.module.substance.definitional.NonSubstanceConceptDefintionalElementImplementation"
},
{
"implementationClass" : "gsrs.module.substance.definitional.NucleicAcidDefinitionalElementImpl"
},
{
"implementationClass" : "gsrs.module.substance.definitional.PolymerDefinitionalElementImpl"
},
{
"implementationClass" : "gsrs.module.substance.definitional.ProteinSubstanceDefinitionalElementImpl"
},
{
"implementationClass" : "gsrs.module.substance.definitional.SSG1DefinitionalElementImpl"
},
{
"implementationClass" : "gsrs.module.substance.definitional.StructurallyDiverseDefinitionalElementImpl"
}
]

gsrs.resolvers.implementations =[

{
"resolverClass" : "ix.ncats.resolvers.OpsinResolver"
}
,
{
"resolverClass" : "ix.ncats.resolvers.NCIStructureResolver"
},
{
"resolverClass" : "ix.ncats.resolvers.PubChemService"
}
]

gsrs.entityProcessors.list.SubstanceProcessor =
    {
      "entityClassName" = "ix.ginas.models.v1.Substance",
      "processor" = "gsrs.module.substance.processors.SubstanceProcessor",
      "order" =  1000
    }
#         gsrs.entityProcessors.list.ChemicalStructurePropertiesProcessor =
#         {
#           "entityClassName" = "ix.ginas.models.v1.Substance",
#           "processor" = "gsrs.module.substance.processors.ChemicalStructurePropertiesProcessor",
#           "order" =  1100
#         }
gsrs.entityProcessors.list.PublicTagFlagger =
    {
      "entityClassName" = "ix.ginas.models.v1.Substance",
      "processor" = "gsrs.module.substance.processors.PublicTagFlagger"
      "order" =  1200
    }
gsrs.entityProcessors.list.ReferenceProcessor =
    {
      "entityClassName" = "ix.ginas.models.v1.Reference",
      "processor" = "gsrs.module.substance.processors.ReferenceProcessor",
      "order" =  1300
    }
gsrs.entityProcessors.list.RelationshipProcessor =
    {
      "entityClassName" = "ix.ginas.models.v1.Substance",
      "processor" = "gsrs.module.substance.processors.RelationshipProcessor",
      "order" =  1400
    }
# gsrs.entityProcessors.list.ApprovalIdProcessor =
#        {
#	       "entityClassName" = "ix.ginas.models.v1.Substance",
#	       "processor" = "gsrs.module.substance.processors.ApprovalIdProcessor",
#          "order" = 1500
#         },
gsrs.entityProcessors.list.GroupProcessor =
    {
      "entityClassName" = "ix.ginas.models.v1.Substance",
      "processor" = "gsrs.module.substance.processors.GroupProcessor",
      "order" =  1600
    }


gsrs.scheduled-tasks.list.ReindexTaskInitializer =
{
"scheduledTaskClass" : "gsrs.module.substance.tasks.ReindexTaskInitializer",
"order" = 1000,
"parameters" : {
"autorun": false
}
}

gsrs.scheduled-tasks.list.StructureRecalcTaskInitializer =
{
"scheduledTaskClass" : "gsrs.module.substance.tasks.StructureRecalcTaskInitializer",
"order" = 1100,
"parameters" : {
"autorun": false
}
}
gsrs.scheduled-tasks.list.RebackupTaskInitializer =
{
"scheduledTaskClass" : "gsrs.module.substance.tasks.RebackupTaskInitializer",
"order" = 1200,
"parameters" : {
"autorun": false,
                  "description" : "Re-backup all Substance entities",
                  "repositoryClass" : "gsrs.module.substance.repository.SubstanceRepository"
              }
}
gsrs.scheduled-tasks.list.ChronicStackDumper =
{
  "scheduledTaskClass" : "gsrs.module.substance.tasks.ChronicStackDumper",
"order" = 1300,
  "parameters" : {
  "autorun": false,
   "dateFormat" : "yyyy.MMMM.dd hh:mm:ss a", #any valid Java 8 DateTimeFormatter
   "cron":"0 0/3 * * * ?", #every 3 mins
   "outputPath" : "logs/all-running-stacktraces.log"
  }
}
gsrs.scheduled-tasks.list.DataRecorder =
{
"scheduledTaskClass" : "gsrs.module.substance.tasks.DataRecorder",
"order" = 1400,
 "parameters" : {
  "autorun": false,
  "dateFormat" : "yyyy.MMMM.dd hh:mm:ss a", #any valid Java 8 DateTimeFormatter
"cron":"0/10 * * * * ?", #every 10 seconds
  "outputPath" : "logs/datarecorder.log"
}
}

gsrs.scheduled-tasks.list.ImportMetadataReindexTask =
{
"scheduledTaskClass" : "gsrs.dataexchange.tasks.ImportMetadataReindexTask",
"order" = 1500,
"parameters": {
  "autorun": false
}
}
gsrs.scheduled-tasks.list.SubstanceRefTaskInitializer =
{
#fixes
"scheduledTaskClass" : "gsrs.module.substance.tasks.SubstanceRefTaskInitializer",
"order" = 1600,
"parameters" : {
  "autorun": false,
  "refUuidCodeSystem" :"UUID Code",
  "reportFilePath" :"logs/substance_reference_report.txt",
  "refApprovalIdCodeSystem" : "FDA UNII"
}
}
gsrs.scheduled-tasks.list.CalculateMatchablesScheduledTask =
{
"scheduledTaskClass" : "gsrs.dataexchange.tasks.CalculateMatchablesScheduledTask",
"order" = 1700,
"parameters" : {
  "autorun": false,
  "threadCount": 5 # Use max 5 threads, if null or <1 this will use all threads available
}
}
gsrs.scheduled-tasks.list.CalculateStagingAreaMatchablesScheduledTask =
{
"order" = 1800,
"scheduledTaskClass" : "gsrs.tasks.CalculateStagingAreaMatchablesScheduledTask",
"parameters" : {
  "autorun": false,
  "threadCount": 5 # Use max 5 threads, if null or <1 this will use all threads available
}
}



# turn on polymer, mixture and modifcation searches for structure searches
# by default
ix.ginas.structure.search.includePolymers=true
ix.ginas.structure.search.includeModifications=true
ix.ginas.structure.search.includeMixtures=true


# What does this do? __aw__ I don't think this is included in the code logic
gsrs.indexers.includeDefaultIndexers = false


# start at 3000
gsrs.indexers.list.DeprecatedIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.DeprecatedIndexValueMaker",
"class" = "ix.ginas.models.v1.Substance",
"order" = 3000
}

# gsrs.indexers.list.ChemicalSubstanceStructureHashIndexValueMaker =
# This should be unnecessary right now. May be used later
# {
# "indexer" = "gsrs.module.substance.indexers.ChemicalSubstanceStructureHashIndexValueMaker",
# "order" = 3100
# },
gsrs.indexers.list.InchiKeyIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.InchiKeyIndexValueMaker",
"order" = 3200
}
gsrs.indexers.list.SubstanceFacetStatusIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.SubstanceFacetStatusIndexValueMaker",
"order" = 3300
}
gsrs.indexers.list.SubstanceDefinitionalHashIndexer =
{
"indexer" = "gsrs.module.substance.indexers.SubstanceDefinitionalHashIndexer",
"order" = 3400
}
gsrs.indexers.list.RecordAccessIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.RecordAccessIndexValueMaker",
"order" = 3500
}
gsrs.indexers.list.MolecularWeightPropertyIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.MolecularWeightPropertyIndexValueMaker",
"order" = 3600
}
gsrs.indexers.list.MoietyTypeIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.MoietyTypeIndexValueMaker",
"order" = 3700
}
gsrs.indexers.list.MixtureStructureHashIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.MixtureStructureHashIndexValueMaker",
"order" = 3800
}
gsrs.indexers.list.ATCIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.ATCIndexValueMaker",
"order" = 3900
}
gsrs.indexers.list.BracketTermIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.BracketTermIndexValueMaker",
"order" = 4000
}
gsrs.indexers.list.SDGIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.SDGIndexValueMaker",
"order" = 4100
}
gsrs.indexers.list.SubstanceBasicsIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.SubstanceBasicsIndexValueMaker",
"order" = 4200
}
gsrs.indexers.list.UserSavedListIndexValueMaker =
{
"indexer" = "gsrs.module.substance.indexers.UserSavedListIndexValueMaker",
"order" = 4300
}
gsrs.indexers.list.MetadataSourceIndexValueMaker =
{
"indexer" = "gsrs.imports.indexers.MetadataSourceIndexValueMaker",
"order" = 4400
}
gsrs.indexers.list.RawDataImportMetadataIndexValueMaker =
{
"indexer" = "gsrs.imports.indexers.RawDataImportMetadataIndexValueMaker",
"order" = 4500
}
gsrs.indexers.list.MetadataMatchCountIndexValueMaker =
{
"indexer" = "gsrs.imports.indexers.MetadataMatchCountIndexValueMaker"
"order" = 4600
}
gsrs.indexers.list.MetadataStatusIndexValueMaker =
{
"indexer" = "gsrs.imports.indexers.MetadataStatusIndexValueMaker"
"order" = 4700
}
gsrs.indexers.list.MetadataValidationIndexValueMaker =
{
"indexer" = "gsrs.imports.indexers.MetadataValidationIndexValueMaker",
"order" = 4800
}
gsrs.indexers.list.ImportMetadataBasicsIndexValueMaker =
{
"indexer" = "gsrs.imports.indexers.ImportMetadataBasicsIndexValueMaker",
"order" = 4700
}


# Example report.  Change the SQL and path to suit your needs
# gsrs.scheduled-tasks.list.SQLReportScheduledTaskInitializer =
#	{
#		"scheduledTaskClass" : "gsrs.module.substance.tasks.SQLReportScheduledTaskInitializer",
#       "order" = 1900,
#		"parameters" : {
#		"autorun": true,
#		"sql": "select s.uuid, dtype, s.current_version, s.created, c.code, c.code_system from ix_ginas_substance s, ix_ginas_code c where s.uuid = c.owner_uuid and c.type= 'PRIMARY'",
#		"outputPath": "test_code_report_%DATE%_%TIME%.txt",
#		"name": "Simple Code Report",
#        "cron":"0 0/1 * * * ?", #every 1 mins
### Datasource qualifier can be specified if needed. This is typically of the form:
### "<resource>DataSource". For example, "defaultDataSource" or "productsDataSource"/
###		"dataSourceQualifier":"defaultDataSource",
#		}
#	}

# Example SPL report.  Change the SPL settings to suit your needs
# gsrs.scheduled-tasks.list.SplExportInitializer =
#	{
#		"scheduledTaskClass" : "gsrs.module.substance.tasks.SplExportInitializer",
#       "order" = 2000,
#		"parameters" : {
#		"autorun": true,
#		"username":"admin",
## You can set up an explicit export directory, but don't need to
##		"outputPath": "tmpspl",
#		"name": "SPL export",
#       "cron":"0 0/10 * * * ?" #every 1 mins
#		}
#	}

gsrs.search.substances.restrictDefaultToIdentifiers=true

gsrs.scheduled-tasks.list.NameStandardizerTaskInitializer_RISN =
{
"scheduledTaskClass" : "gsrs.module.substance.tasks.NameStandardizerTaskInitializer",
    "order" = 2100
"parameters" : {
  "nameStandardizerClassName": "gsrs.module.substance.standardizer.FDAFullNameStandardizer",
  "autorun": false,
  "regenerateNameValue":"[standardize me]",
  "forceRecalculationOfAll": false,
  "description" : "Regenerate standardized names, report on inconsistent standardized names without changing existing standardized names"
  "cron":"0 0/0 0 1 * ?", #every
}
}

gsrs.scheduled-tasks.list.NameStandardizerTaskInitializer_FISN =
{
    "scheduledTaskClass" : "gsrs.module.substance.tasks.NameStandardizerTaskInitializer",
    "order" = 2200,
"parameters" : {
  "nameStandardizerClassName": "gsrs.module.substance.standardizer.FDAFullNameStandardizer",
  "autorun": false,
  "regenerateNameValue":"[standardize me]",
  "forceRecalculationOfAll": true,
  "disabledHistory": true,
  "disabledHooks": true,
  "threadCount": 5,
  "description" : "Regenerate standardized names, force inconsistent standardized names to be regenerated"
  "cron":"0 0/0 0 1 * ?", #every
}
}

ix.ginas.export.settingsPresets.substances= {
"PUBLIC_DATA_ONLY": {
 "owner":"admin",
 "scrubberSettings": {
   "removeAllLocked":true
 }
},
"ALL_DATA": {
"owner":"admin",
 "scrubberSettings":null
}
}


gsrs.standardizers.substances = {
"name" = {
    "standardizerClass" = "gsrs.module.substance.standardizer.HtmlNameStandardizer"
},
"stdname" = {
    "standardizerClass" = "gsrs.module.substance.standardizer.HtmlNameStandardizer"
}
}

# ix.gsrs.sdfActions={structure_and_moieties:'gsrs.module.substance.importers.StructureExtractorActionFactory',
# code_import:'gsrs.module.substance.importers.CodeExtractorActionFactory',
# common_name:'gsrs.module.substance.importers.NameExtractorActionFactory'}


#### __aw__ This was in substances-core.conf but is different than what was in application.conf
# gsrs.importAdapterFactories.substances = []
# gsrs.importAdapterFactories.substances += {
#     "importAdapterFactoryClass" = "gsrs.module.substance.importers.SDFImportAdapterFactory",
#     "adapterName" = "NSRS SDF Adapter",
#     "extensions" = ["sdf", "sd"],
#     "parameters" = {
#         "actions"=[
#             {
#             "actionName" : "cas_import",
#             "importActionFactoryClass" : "gsrs.module.substance.importers.importActionFactories.NSRSCustomCodeExtractorActionFactory",
#             "fields" = [
#                 {
#                     "fieldName" = "CASNumber",
#                     "fieldLabel" = "CAS Number",
#                     "fieldType" = "java.lang.String",
#                     "required" =  true,
#                     "showInUi" = true
#                 },
#                 {
#                     "fieldName" = "codeType",
#                     "fieldLabel" = "Primary or Alternative",
#                     "fieldType" = "java.lang.String",
#                     "required" =  false,
#                     "defaultValue" = "PRIMARY",
#                     "showInUi" = true
#                 },
#                  {
#                      "fieldName" = "url",
#                      "fieldLabel" = "URL",
#                      "fieldType" = "java.lang.String",
#                      "required" =  false,
#                      "defaultValue" = "https://commonchemistry.cas.org/detail?cas_rn=",
#                      "showInUi" = false
#                  }
#             ]
#             }
#         ]
#     }
# }

# __aw__ what does this refer to?
# this is the length to expect the column to be
# for names after truncation


#### __aw__: this was copied from application.conf for others' testing purposes
#### In future we may want this in substances-core.conf as it can be overridden
###  need to reconcile the various ways this stuff is configured in different places.


gsrs.importAdapterFactories.substances.list.SDFImportAdapterFactory =
  {
    "adapterName": "SDF Adapter",
    "importAdapterFactoryClass": "gsrs.module.substance.importers.SDFImportAdapterFactory",
    "order": 1000,
    "stagingAreaServiceClass": "gsrs.stagingarea.service.DefaultStagingAreaService",
    "entityServiceClass" :"gsrs.dataexchange.SubstanceStagingAreaEntityService",
    "description" : "SD file importer for general users",
    "supportedFileExtensions": [
      "sdf",
      "sd",
      "sdfile"
    ],

    "parameters": {
      #the things used to instantiate a thing used to do the import

      "fileImportActions": [
        ##list of available actions for user to select from
        #each action takes in a file record + a substance record to update substance record with data from file
        {
          "actionClass": "gsrs.module.substance.importers.importActionFactories.NameExtractorActionFactory",
          "fields": [
            {
              "fieldName": "Name",
              "fieldLabel": "Substance Name",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            },
            {
              "fieldName": "nameType",
              "fieldLabel": "Name Type",
              "defaultValue": "cn",
              "cv": "name_type",
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            },
            {
              "fieldName": "displayName",
              "fieldLabel": "Display Name?",
              "defaultValue": false,
              "fieldType": "java.lang.Boolean",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            }
          ],
          "parameters": {
            "lang": "en"
          },
          "actionName": "common_name",
          "label":"Create Name"
        },
        {
          "actionName": "code_import",
          "label":"Create Code",
          "actionClass": "gsrs.module.substance.importers.importActionFactories.CodeExtractorActionFactory",
          "fields": [
            {
              "fieldName": "code",
              "fieldLabel": "Code/Identifier",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            },
            {
              "fieldName": "codeType",
              "fieldLabel": "Primary or Alternative",
              "defaultValue": "PRIMARY",
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            },
            {
              "fieldName": "codeSystem",
              "fieldLabel": "Code System",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            }
          ],
          "parameters": {
          }
        },
        {
          "actionClass": "gsrs.module.substance.importers.importActionFactories.NSRSCustomCodeExtractorActionFactory",
          "fields": [
            {
              "fieldName": "code",
              "fieldLabel": "NSC Number",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            },
            {
              "fieldName": "codeType",
              "fieldLabel": "Primary or Alternative",
              "defaultValue": "PRIMARY",
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            }
          ],
          "parameters": {
            "codeSystem": "NSC"
          },
          "actionName": "nci_import",
          "label":"Create NSC Code"
        },
        {
          "actionClass": "gsrs.module.substance.importers.importActionFactories.StructureExtractorActionFactory",
          "fields": [
            {
              "fieldName": "molfile",
              "fieldLabel": "Structure",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            }
          ],
          "parameters": {

          },
          "actionName": "structure_and_moieties",
          "label":"Create Structure"
        },
        {
          "actionClass": "gsrs.module.substance.importers.importActionFactories.PropertyExtractorActionFactory",
          "fields": [
            {
              "fieldName": "name",
              "fieldLabel": "Name",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            },
            {
              "fieldName": "propertyType",
              "fieldLabel": "Property Type",
              "defaultValue": "chemical",
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            },
            {
              "fieldName": "valueAverage",
              "fieldLabel": "Average Value",
              "defaultValue": null,
              "fieldType": "java.lang.Double",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            },
            {
              "fieldName": "valueNonNumeric",
              "fieldLabel": "Non-numeric Value",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            },
            {
              "fieldName": "valueUnits",
              "fieldLabel": "Units",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            }
          ],
          "parameters": {
          },
          "actionName": "property_import",
          "label":"Create Chemical Property"
        },
        {
          "actionClass": "gsrs.module.substance.importers.importActionFactories.ReferenceExtractorActionFactory",
          "fields": [
            {
              "fieldName": "docType",
              "fieldLabel": "Type",
              "defaultValue": "OTHER",
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            },
            {
              "fieldName": "citation",
              "fieldLabel": "Reference",
              "defaultValue": "{INSERT REFERENCE CITATION HERE}",
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": false,
              "lookupKey": null
            }
          ],
          "parameters": {

          },
          "actionName": "public_reference",
          "label":"Create Reference"
        },
        {
          "actionClass": "gsrs.module.substance.importers.importActionFactories.NotesExtractorActionFactory",
          "fields": [
            {
              "fieldName": "note",
              "fieldLabel": "Note",
              "defaultValue": null,
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "required": true,
              "lookupKey": null
            }
          ],
          "parameters": {
          },
          "actionName": "note_import",
          "label":"Create Note"
        },
        {
          "actionClass": "gsrs.module.substance.importers.importActionFactories.NoOpActionFactory",
          "fields": [
            {
              "fieldName": "fieldName",
              "fieldLabel": "Field to ignore",
              "fieldType": "java.lang.String",
              "expectedToChange": true,
              "lookupKey": null
            }
          ],
          "parameters": {
          },
          "actionName": "no-op",
          "label":"Omit this field"
        }
      ]
    }
  }

gsrs.importAdapterFactories.substances.list.GSRSJSONImportAdapterFactory =
  {
    "adapterName": "GSRS JSON Adapter",
    "importAdapterFactoryClass": "gsrs.module.substance.importers.GSRSJSONImportAdapterFactory",
    "order": 1100,
    "stagingAreaServiceClass": "gsrs.stagingarea.service.DefaultStagingAreaService",
    "entityServiceClass" :"gsrs.dataexchange.SubstanceStagingAreaEntityService",
    "description" : "GSRS legacy JSON file importer",
    #extensions belong here because they can override the default set within the class
    "supportedFileExtensions": [
      "gsrs",
      "gz"
    ],
    "parameters": {
    }
  }


### __aw__ is this needed?
# gsrs.defaultStagingAreaServiceClass.substances = gsrs.stagingarea.service.DefaultStagingAreaService
# gsrs.defaultStagingAreaEntityService.substances = gsrs.dataexchange.SubstanceStagingAreaEntityService
# gsrs.availableProcessActions.substances = ["gsrs.dataexchange.processingactions.CreateProcessingAction",
#	"gsrs.dataexchange.processingactions.MergeProcessingAction",
#	"gsrs.dataexchange.processingactions.RejectProcessingAction",
#	"gsrs.dataexchange.processingactions.CreateBatchProcessingAction"]





gsrs.substance.data.nameColumnLength=254


# This feature allows one to filter on validation message ids or message texts to
# for example change a warning to a notice for users with a given role.
# OverrideRule(s) could look like this:
# {"regex": "W.*", "userRoles": ["Approver","Admin"], "newMessageType": "NOTICE"}
# In this sample rule, the regex determines if the messageId begins with W, implying
# a warning.
gsrs.processing-strategy = {
"defaultStrategy": "ACCEPT_APPLY_ALL",
"overrideRules": [
    # NamesValidator duplicateNameIsError
    # {"regex": "W7431274", "newMessageType": "ERROR"},
    # {"regex": "W7439452", "newMessageType": "ERROR"},
    # SubstanceUniquenessValidator
    {"regex": "E4562650", "userRoles": ["SuperUpdate", "SuperDataEntry"], "newMessageType": "WARNING"}
]
}



## This is what mitch had for matchables, this was not included in previous substances-core.conf
## decide if this should be included after testing.

gsrs.matchableCalculators.substances.list.CASNumberMatchableExtractor =
{
  "matchableCalculationClass" : "gsrs.dataexchange.extractors.CASNumberMatchableExtractor",
  "order": 1000,
  "config": {
    "casCodeSystems": ["CAS", "CASNo", "CASNumber"]
  }
}
gsrs.matchableCalculators.substances.list.AllNamesMatchableExtractor =
{
  "matchableCalculationClass" : "gsrs.dataexchange.extractors.AllNamesMatchableExtractor",
  "order": 1100,
  "config" :{}
}
gsrs.matchableCalculators.substances.list.ApprovalIdMatchableExtractor =
{
  "matchableCalculationClass" : "gsrs.dataexchange.extractors.ApprovalIdMatchableExtractor",
  "order": 1200,
  "config" :{}
}
gsrs.matchableCalculators.substances.list.DefinitionalHashMatchableExtractor =
{
  "matchableCalculationClass" : "gsrs.dataexchange.extractors.DefinitionalHashMatchableExtractor",
  "order": 1300,
  "config" :{}
}
gsrs.matchableCalculators.substances.list.SelectedCodesMatchableExtractor =
{
  "matchableCalculationClass" : "gsrs.dataexchange.extractors.SelectedCodesMatchableExtractor",
  "order": 1400,
  "config": {
    "codeSystems" :["CAS", "ChemBL", "NCI", "NSC", "EINECS"]
  }
}
gsrs.matchableCalculators.substances.list.UUIDMatchableExtractor =
{
  "matchableCalculationClass" : "gsrs.dataexchange.extractors.UUIDMatchableExtractor",
  "order": 1500,
  "config" :{}
}
gsrs.matchableCalculators.substances.list.CodeMatchableExtractor =
{
  "matchableCalculationClass" : "gsrs.dataexchange.extractors.CodeMatchableExtractor",
  "order": 1600,
  "disabled": true,
  "config": {
    "reqCodeSystems": ["FDA UNII"],
    "codeType": "PRIMARY",
    "codeKey": "CODE"
  }
}






# This shows how special render settings can be applied
# at a pretty deep explicit level. This is ported over largely from how
# it was done in GSRS 2.8
#
#
# 1. Supports embedded JSON options definitions for the structure renderer
# 2. Supports naming styles for use
# 3. Supports using previously named styles and making variations of them
#
gsrs.renderers.list=[
{
"name" : "CLEAN",
"renderer" :{
    "preset": "USP",     //Note this part
    "options" : {
        "PROP_KEY_DRAW_GREYSCALE" : false,
        "ATOM_LABEL_FONT_FRACTION" : 0.47918,
        "ATOM_LABEL_BOND_GAP_FRACTION" :1.02,
        "BOND_STROKE_WIDTH_FRACTION" : 0.032,
        "BOND_DOUBLE_GAP_FRACTION": 0.1995,
        "BOND_STEREO_WEDGE_ANGLE" : 0.13659,
        "BOND_STEREO_DASH_NUMBER" :8,
        "SUBSCRIPT_Y_DISPLACEMENT_FRACTION" : 0.17,
        "DRAW_WEDGE_AS_POINT" : false,
        "DRAW_STEREO_WEDGE_JOIN" : true,
        "DRAW_STEREO_LAST_DASH_ON_NON_SYMBOLS" : false,
              "colorPalette" : {
                "atomColors" : {
                    "C" : "FFFF0000" // red carbons (ugly)
                }
            }
          },
          "add-shadow" : true,
          "add-border" : false
        }
},
{
"name" : "MONSTRUOUS",
"renderer" :{
    "preset": "CLEAN",     //Note this part
    "options" : {
        "BOND_STROKE_WIDTH_FRACTION" : 0.64
          },
          "add-shadow" : false,
          "add-border" : false
        }
}
]

# Here, you can specify the main renderer style to use, which can be one of the default supported cases
# or can be one of the specified cases in the list above. 

#gsrs.renderers.selected="CLEAN1"
